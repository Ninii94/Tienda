{"ast":null,"code":"\n\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Navbar from './components/Navbar';\r\nimport Login from './components/Login';\r\nimport Register from './components/Register';\r\nimport ProductList from './components/ProductList';\r\nimport AdminCrud from './components/PanelAdmin';\r\n\r\nimport Cart from './components/Cart/Cart';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport Testimonials from './components/Testimonials';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [cart, setCart] = useState([]);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [products, setProducts] = useState([]);\r\n  const [isAdminPage, setIsAdminPage] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const loggedIn = localStorage.getItem('isLoggedIn') === 'true';\r\n    if (loggedIn) {\r\n      setIsLoggedIn(true);\r\n    }\r\n    const fetchProducts = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:3001/products');\r\n        setProducts(response.data);\r\n      } catch (error) {\r\n        console.error('Error al obtener los productos:', error);\r\n      }\r\n    };\r\n    fetchProducts();\r\n    const checkAdminRoute = () => {\r\n      const location = window.location;\r\n      setIsAdminPage(location.pathname === '/admin');\r\n    };\r\n     checkAdminRoute();\r\n\r\n     // detectar cambios en la ruta\r\n     window.addEventListener('popstate', checkAdminRoute);\r\n \r\n     return () => {\r\n       window.removeEventListener('popstate', checkAdminRoute);\r\n     };\r\n  }, []);\r\n  \r\n\r\n  const handleLogin = async (username, password) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/users', { username, password });\r\n      \r\n      if (response.data.length > 0) {\r\n        setIsLoggedIn(true);\r\n        localStorage.setItem('isLoggedIn', 'true');\r\n        localStorage.setItem('user', JSON.stringify(response.data[0]));\r\n        alert('Bienvenid@');\r\n      } else {\r\n        alert('Usuario o contraseña incorrectos');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al iniciar sesión:', error);\r\n      alert('Contraseña y/o Usuario incorrectos');\r\n    }\r\n  };\r\n  \r\n  const handleAddToCart = (product) => {\r\n    setCart([...cart, { ...product, quantity: 1 }]);\r\n    setShowAlert(true); \r\n    setTimeout(() => {\r\n      setShowAlert(false); \r\n    }, 3000);\r\n  };\r\n\r\n  const handleRemove = (item) => {\r\n    const updatedCart = cart.filter((cartItem) => cartItem.id !== item.id);\r\n    setCart(updatedCart);\r\n  };\r\n\r\n  const handleQuantityChange = (item, newQuantity) => {\r\n    const updatedCart = cart.map((cartItem) =>\r\n      cartItem.id === item.id ? { ...cartItem, quantity: newQuantity } : cartItem\r\n    );\r\n    setCart(updatedCart);\r\n  };\r\n  const handleLogout = () => {\r\n    setIsLoggedIn(false);\r\n    localStorage.removeItem('isLoggedIn');\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('cart');  // Opcional: limpiar carrito al salir\r\n    setCart([]);\r\n  };\r\n  const updateProducts = async (updatedProduct) => {\r\n    try {\r\n      await axios.put(`http://localhost:3001/products/${updatedProduct.id}`, updatedProduct);\r\n      const response = await axios.get('http://localhost:3001/products');\r\n      setProducts(response.data);\r\n    } catch (error) {\r\n      console.error('Error al actualizar el producto:', error);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Router>\r\n       <div className=\"App\">\r\n        {!isAdminPage && <Navbar isLoggedIn={isLoggedIn} cart={cart} />}\r\n        <Routes>\r\n          <Route path=\"/login\" element={<Login onLogin={handleLogin} />} />\r\n          <Route path=\"/register\" element={<Register />} />\r\n          <Route\r\n            path=\"/\"\r\n            element={\r\n              <>\r\n                <ProductList products={products} onAddToCart={handleAddToCart} />\r\n                <Testimonials />\r\n              </>\r\n            }\r\n          />\r\n          <Route\r\n            path=\"/cart\"\r\n            element={\r\n              <Cart\r\n                cart={cart}\r\n                onRemove={handleRemove}\r\n                onQuantityChange={handleQuantityChange}\r\n                showAlert={showAlert}\r\n              />\r\n            }\r\n          />\r\n          <Route\r\n             exact\r\n             path=\"/admin\"\r\n             element={\r\n               <AdminCrud products={products} updateProducts={updateProducts} />\r\n             }\r\n              />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App; */","map":{"version":3,"names":[],"sources":["D:/Nini/programacion/Tienda/src/App.js"],"sourcesContent":["\r\n\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Navbar from './components/Navbar';\r\nimport Login from './components/Login';\r\nimport Register from './components/Register';\r\nimport ProductList from './components/ProductList';\r\nimport AdminCrud from './components/PanelAdmin';\r\n\r\nimport Cart from './components/Cart/Cart';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport Testimonials from './components/Testimonials';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [cart, setCart] = useState([]);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [products, setProducts] = useState([]);\r\n  const [isAdminPage, setIsAdminPage] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const loggedIn = localStorage.getItem('isLoggedIn') === 'true';\r\n    if (loggedIn) {\r\n      setIsLoggedIn(true);\r\n    }\r\n    const fetchProducts = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:3001/products');\r\n        setProducts(response.data);\r\n      } catch (error) {\r\n        console.error('Error al obtener los productos:', error);\r\n      }\r\n    };\r\n    fetchProducts();\r\n    const checkAdminRoute = () => {\r\n      const location = window.location;\r\n      setIsAdminPage(location.pathname === '/admin');\r\n    };\r\n     checkAdminRoute();\r\n\r\n     // detectar cambios en la ruta\r\n     window.addEventListener('popstate', checkAdminRoute);\r\n \r\n     return () => {\r\n       window.removeEventListener('popstate', checkAdminRoute);\r\n     };\r\n  }, []);\r\n  \r\n\r\n  const handleLogin = async (username, password) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/users', { username, password });\r\n      \r\n      if (response.data.length > 0) {\r\n        setIsLoggedIn(true);\r\n        localStorage.setItem('isLoggedIn', 'true');\r\n        localStorage.setItem('user', JSON.stringify(response.data[0]));\r\n        alert('Bienvenid@');\r\n      } else {\r\n        alert('Usuario o contraseña incorrectos');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al iniciar sesión:', error);\r\n      alert('Contraseña y/o Usuario incorrectos');\r\n    }\r\n  };\r\n  \r\n  const handleAddToCart = (product) => {\r\n    setCart([...cart, { ...product, quantity: 1 }]);\r\n    setShowAlert(true); \r\n    setTimeout(() => {\r\n      setShowAlert(false); \r\n    }, 3000);\r\n  };\r\n\r\n  const handleRemove = (item) => {\r\n    const updatedCart = cart.filter((cartItem) => cartItem.id !== item.id);\r\n    setCart(updatedCart);\r\n  };\r\n\r\n  const handleQuantityChange = (item, newQuantity) => {\r\n    const updatedCart = cart.map((cartItem) =>\r\n      cartItem.id === item.id ? { ...cartItem, quantity: newQuantity } : cartItem\r\n    );\r\n    setCart(updatedCart);\r\n  };\r\n  const handleLogout = () => {\r\n    setIsLoggedIn(false);\r\n    localStorage.removeItem('isLoggedIn');\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('cart');  // Opcional: limpiar carrito al salir\r\n    setCart([]);\r\n  };\r\n  const updateProducts = async (updatedProduct) => {\r\n    try {\r\n      await axios.put(`http://localhost:3001/products/${updatedProduct.id}`, updatedProduct);\r\n      const response = await axios.get('http://localhost:3001/products');\r\n      setProducts(response.data);\r\n    } catch (error) {\r\n      console.error('Error al actualizar el producto:', error);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Router>\r\n       <div className=\"App\">\r\n        {!isAdminPage && <Navbar isLoggedIn={isLoggedIn} cart={cart} />}\r\n        <Routes>\r\n          <Route path=\"/login\" element={<Login onLogin={handleLogin} />} />\r\n          <Route path=\"/register\" element={<Register />} />\r\n          <Route\r\n            path=\"/\"\r\n            element={\r\n              <>\r\n                <ProductList products={products} onAddToCart={handleAddToCart} />\r\n                <Testimonials />\r\n              </>\r\n            }\r\n          />\r\n          <Route\r\n            path=\"/cart\"\r\n            element={\r\n              <Cart\r\n                cart={cart}\r\n                onRemove={handleRemove}\r\n                onQuantityChange={handleQuantityChange}\r\n                showAlert={showAlert}\r\n              />\r\n            }\r\n          />\r\n          <Route\r\n             exact\r\n             path=\"/admin\"\r\n             element={\r\n               <AdminCrud products={products} updateProducts={updateProducts} />\r\n             }\r\n              />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App; */"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}