{"ast":null,"code":"\n\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './admin.css';\r\nimport { Image } from 'cloudinary-react';\r\n\r\nfunction AdminCrud({handleLogout}) {\r\n  const [products, setProducts] = useState([]);\r\n  const [productName, setProductName] = useState('');\r\n  const [productPrice, setProductPrice] = useState('');\r\n  const [editingProduct, setEditingProduct] = useState(null);\r\n  const navigate = useNavigate();\r\n  const [imageUrl, setImageUrl] = useState('');\r\n  const uploadPreset = 'munecas';\r\n  const cloudName = 'barbibibi';\r\n  \r\n  \r\n  \r\n\r\n  useEffect(() => {\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  const fetchProducts = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:3001/products');\r\n      setProducts(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching products:', error);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e, field) => {\r\n    switch (field) {\r\n      case 'name':\r\n        setProductName(e.target.value);\r\n        break;\r\n      case 'price':\r\n        setProductPrice(e.target.value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleAddProduct = async () => {\r\n    try {\r\n      const newProduct = {\r\n        name: productName,\r\n        price: parseFloat(productPrice),\r\n        image: imageUrl,\r\n      };\r\n\r\n      const response = await axios.post('http://localhost:3001/products', newProduct);\r\n      setProducts([...products, response.data]);\r\n      toast.success('Producto añadido con éxito', { toastId: 'add-product' });\r\n      clearFields();\r\n    } catch (error) {\r\n      console.error('Error adding product:', error);\r\n      toast.error('Error al añadir el producto', { toastId: 'add-product-error' });\r\n    }\r\n  };\r\n\r\n  const handleImageUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('upload_preset', uploadPreset);\r\n\r\n    try {\r\n      const res = await axios.post(`https://api.cloudinary.com/v1_1/${cloudName}/image/upload`, formData);\r\n      setImageUrl(res.data.secure_url);\r\n    } catch (err) {\r\n      console.error('Error al subir la imagen:', err);\r\n      toast.error('Error al subir la imagen', { toastId: 'upload-image-error' });\r\n    }\r\n  };\r\n\r\n  const handleDeleteProduct = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:3001/products/${id}`);\r\n      toast.success('Producto eliminado', { toastId: 'delete-product' });\r\n      fetchProducts();\r\n    } catch (error) {\r\n      console.error('Error deleting product:', error);\r\n      toast.error('Error al eliminar el producto', { toastId: 'delete-product-error' });\r\n    }\r\n  };\r\n\r\n  const handleEditProduct = (product) => {\r\n    setEditingProduct(product);\r\n    setProductName(product.name);\r\n    setProductPrice(product.price.toString());\r\n  };\r\n\r\n  const handleUpdateProduct = async () => {\r\n    try {\r\n      const updatedProduct = {\r\n        name: productName,\r\n        price: parseFloat(productPrice),\r\n        image: imageUrl || editingProduct.image,\r\n      };\r\n\r\n      await axios.put(`http://localhost:3001/products/${editingProduct.id}`, updatedProduct);\r\n      toast.success('Producto actualizado con éxito', { toastId: 'update-product' });\r\n      setEditingProduct(null);\r\n      clearFields();\r\n      fetchProducts();\r\n    } catch (error) {\r\n      console.error('Error updating product:', error);\r\n      toast.error('Error al actualizar el producto', { toastId: 'update-product-error' });\r\n    }\r\n  };\r\n\r\n  const clearFields = () => {\r\n    setProductName('');\r\n    setImageUrl('');\r\n    setProductPrice('');\r\n  };\r\n\r\n  const handleFinishChanges = () => {\r\n    handleLogout();\r\n    navigate('/');\r\n    toast.success('Sesión cerrada y cambios guardados', { toastId: 'logout-success' });\r\n    setTimeout(() => {\r\n    }, 2000);\r\n  };\r\n\r\n  return (\r\n    <div className=\"crud-container\">\r\n      <h2>{editingProduct ? 'Editar Producto' : 'Agregar Nuevo Producto'}</h2>\r\n      <div className=\"form-group\">\r\n        <label>Nombre:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={productName}\r\n          onChange={(e) => handleInputChange(e, 'name')}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Precio:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={productPrice}\r\n          onChange={(e) => handleInputChange(e, 'price')}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Imagen:</label>\r\n        <input\r\n          type=\"file\"\r\n          onChange={handleImageUpload}\r\n        />\r\n        {imageUrl && (\r\n          <div>\r\n            <Image cloudName={cloudName} publicId={imageUrl} />\r\n            <button onClick={() => setImageUrl('')}>Eliminar imagen</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {editingProduct ? (\r\n        <button className=\"btn btn-update\" onClick={handleUpdateProduct}>\r\n          Actualizar\r\n        </button>\r\n      ) : (\r\n        <button className=\"añadir\" onClick={handleAddProduct}>\r\n          Añadir\r\n        </button>\r\n      )}\r\n      <button className=\"btn btn-finish\" onClick={handleFinishChanges}>\r\n        Guardar cambios y cerrar sesión\r\n      </button>\r\n\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={3000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"colored\"\r\n        toastStyle={{ backgroundColor: '#ffc0cb', color: '#000' }}\r\n      />\r\n      <h3 className=\"product-list-title\">Mis productos</h3>\r\n      <ul>\r\n        {products.map((product) => (\r\n          <div className=\"product-item\" key={product.id}>\r\n            <li>\r\n              {}\r\n        {product.image.startsWith('http') ? (\r\n          // Si la imagen proviene de Cloudinary\r\n          <img src={product.image} alt={product.name} />\r\n        ) : (\r\n          // Si la imagen proviene del JSON\r\n          <img src={`/images/${product.image}`} alt={product.name} />\r\n        )}\r\n              <p>Precio: {product.price}</p>\r\n              <p> {product.name}</p>\r\n              <button className=\"btn-eliminar\" onClick={() => handleDeleteProduct(product.id)}>\r\n                Eliminar\r\n              </button>\r\n              <button className=\"btn-modificar\" onClick={() => handleEditProduct(product)}>\r\n                Modificar\r\n              </button>\r\n            </li>\r\n          </div>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminCrud;\r\n\r\n/*import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./admin.css\";\r\nimport axios from 'axios';\r\nimport Toastify from 'toastify-js';\r\nimport 'toastify-js/src/toastify.css';\r\n\r\nconst AdminCrud = ({ products, updateProducts }) => {\r\n  const [productName, setProductName] = useState(\"\");\r\n  const [productPrice, setProductPrice] = useState(\"\");\r\n  const [productImage, setProductImage] = useState(null);\r\n\r\n  const navigate = useNavigate();\r\n\r\n\r\n\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      setProductImage(reader.result);\r\n    };\r\n  };\r\n\r\n  const handleAddProduct = async () => {\r\n    const formData = new FormData();\r\n    formData.append(\"name\", productName);\r\n    formData.append(\"price\", productPrice);\r\n    formData.append(\"image\", productImage);\r\n  \r\n    try {\r\n      const response = await axios.post(\"http://localhost:3001/products\", formData, {\r\n        headers: {\r\n          \"Content-Type\": 'multipart/form-data'\r\n        }\r\n      });\r\n      \r\n      updateProducts([...products, response.data]);\r\n      setProductName(\"\");\r\n      setProductPrice(\"\");\r\n      setProductImage(null);\r\n      Toastify({\r\n        text: \"El nuevo producto ha sido agregado\",\r\n        duration: 3000,\r\n        gravity: \"top\",\r\n        position: \"right\",\r\n        style: {\r\n          background: \"green\",\r\n      },}).showToast();\r\n    } catch (error) {\r\n      console.error(\"Error al agregar producto:\", error);\r\n    }\r\n  };\r\n  const handleFinishChanges = () => {\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const handleDeleteProduct = (productId) => {\r\n    fetch(`http://localhost:3001/products/${productId}`, {\r\n      method: \"DELETE\",\r\n    })\r\n      .then(() => {\r\n        updateProducts(products.filter((product) => product.id !== productId));\r\n        Toastify({\r\n          text: \"Producto eliminado\",\r\n          duration: 3000,\r\n          gravity: \"top\",\r\n          position: \"right\",\r\n          backgroundColor: \"red\",\r\n        }).showToast();\r\n      })\r\n      .catch((error) => console.error(\"Error al eliminar el producto:\", error));\r\n  };\r\n\r\n  const handleUpdateProduct = (productId, updatedProduct) => {\r\n    fetch(`http://localhost:3001/products/${productId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(updatedProduct),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        updateProducts(\r\n          products.map((product) => (product.id === productId ? data : product))\r\n        );\r\n      })\r\n      .catch((error) => console.error(\"Error al modificar el producto:\", error));\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"crud-container\">\r\n      <h2 className= 'nuevo'>Agrega un nuevo producto</h2>\r\n      <div className=\"form-group\">\r\n        <label>Nombre:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={productName}\r\n          onChange={(e) => setProductName(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Precio:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={productPrice}\r\n          onChange={(e) => setProductPrice(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Imagen:</label>\r\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n      </div>\r\n      <button className=\"añadir\" onClick={handleAddProduct}>\r\n        Añadir\r\n      </button>\r\n      <button className=\"btn btn-finish\" onClick={handleFinishChanges}>\r\n        Guardar cambios y cerrar sesión\r\n      </button>\r\n      <h2 className= 'lista'>Lista de productos</h2>\r\n      <ul className=\"product-list\">\r\n        {products.map((product) => (\r\n      <li key={product.id} className=\"product-item\">\r\n      <img src={`/images/${product.image}`} alt={product.name} />\r\n      <span>{product.name}</span>\r\n      <span>{product.price}</span>\r\n      <button onClick={() => handleDeleteProduct(product.id)}>\r\n        Eliminar\r\n      </button>\r\n      <button\r\n        onClick={() =>\r\n          handleUpdateProduct(product.id, {\r\n            ...product,\r\n            name: prompt(\"Nuevo nombre\", product.name),\r\n            price: prompt(\"Nuevo precio\", product.price),\r\n            image: productImage || product.image,\r\n          })\r\n        }\r\n      >\r\n        Modificar\r\n      </button>\r\n    </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminCrud;\r\n*/\n\n/*\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./admin.css\";\r\nimport axios from 'axios';\r\nimport Toastify from 'toastify-js';\r\nimport 'toastify-js/src/toastify.css';\r\n\r\nconst AdminCrud = ({ products, updateProducts }) => {\r\n  const [productName, setProductName] = useState(\"\");\r\n  const [productPrice, setProductPrice] = useState(\"\");\r\n  const [productImage, setProductImage] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      setProductImage(reader.result);\r\n    };\r\n  };\r\n\r\n  const handleAddProduct = async () => {\r\n    const formData = new FormData();\r\n    formData.append(\"name\", productName);\r\n    formData.append(\"price\", productPrice);\r\n    formData.append(\"image\", productImage);\r\n  \r\n    try {\r\n        const response = await axios.post(\"http://localhost:3001/products\", formData);\r\n        updateProducts([...products, response.data]);\r\n        setProductName(\"\");\r\n        setProductPrice(\"\");\r\n        setProductImage(null);\r\n        Toastify({\r\n          text: \"El nuevo producto ha sido agregado\",\r\n          duration: 3000,\r\n          gravity: \"top\",\r\n          position: \"right\",\r\n          backgroundColor: \"green\",\r\n        }).showToast();\r\n      } catch (error) {\r\n        console.error(\"Error al agregar producto:\", error);\r\n      }\r\n    };\r\n  const handleFinishChanges = () => {\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const handleDeleteProduct = (productId) => {\r\n    fetch(`http://localhost:3001/products/${productId}`, {\r\n      method: \"DELETE\",\r\n    })\r\n      .then(() => {\r\n        updateProducts(products.filter((product) => product.id !== productId));\r\n        Toastify({\r\n          text: \"Producto eliminado\",\r\n          duration: 3000,\r\n          gravity: \"top\",\r\n          position: \"right\",\r\n          backgroundColor: \"red\",\r\n        }).showToast();\r\n      })\r\n      .catch((error) => console.error(\"Error al eliminar el producto:\", error));\r\n  };\r\n\r\n  const handleUpdateProduct = (productId, updatedProduct) => {\r\n    fetch(`http://localhost:3001/products/${productId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(updatedProduct),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        updateProducts(\r\n          products.map((product) => (product.id === productId ? data : product))\r\n        );\r\n      })\r\n      .catch((error) => console.error(\"Error al modificar el producto:\", error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"crud-container\">\r\n      <h2 className= 'nuevo'>Agrega un nuevo producto</h2>\r\n      <div className=\"form-group\">\r\n        <label>Nombre:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={productName}\r\n          onChange={(e) => setProductName(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Precio:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={productPrice}\r\n          onChange={(e) => setProductPrice(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Imagen:</label>\r\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n      </div>\r\n      <button className=\"añadir\" onClick={handleAddProduct}>\r\n        Añadir\r\n      </button>\r\n      <button className=\"btn btn-finish\" onClick={handleFinishChanges}>\r\n        Guardar cambios y cerrar sesión\r\n      </button>\r\n      <h2 className= 'lista'>Lista de productos</h2>\r\n      <ul className=\"product-list\">\r\n        {products.map((product) => (\r\n          <li key={product.id} className=\"product-item\">\r\n            <img src={product.image} alt={product.name} />\r\n            <span>{product.name}</span>\r\n            <span>{product.price}</span>\r\n            <button onClick={() => handleDeleteProduct(product.id)}>\r\n              Eliminar\r\n            </button>\r\n            <button\r\n              onClick={() =>\r\n                handleUpdateProduct(product.id, {\r\n                  ...product,\r\n                  name: prompt(\"Nuevo nombre\", product.name),\r\n                  price: prompt(\"Nuevo precio\", product.price),\r\n                  image: productImage || product.image,\r\n                })\r\n              }\r\n            >\r\n              Modificar\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminCrud; */","map":{"version":3,"names":[],"sources":["D:/Nini/programacion/Tienda/src/components/PanelAdmin.js"],"sourcesContent":["\r\n\r\n\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './admin.css';\r\nimport { Image } from 'cloudinary-react';\r\n\r\nfunction AdminCrud({handleLogout}) {\r\n  const [products, setProducts] = useState([]);\r\n  const [productName, setProductName] = useState('');\r\n  const [productPrice, setProductPrice] = useState('');\r\n  const [editingProduct, setEditingProduct] = useState(null);\r\n  const navigate = useNavigate();\r\n  const [imageUrl, setImageUrl] = useState('');\r\n  const uploadPreset = 'munecas';\r\n  const cloudName = 'barbibibi';\r\n  \r\n  \r\n  \r\n\r\n  useEffect(() => {\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  const fetchProducts = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:3001/products');\r\n      setProducts(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching products:', error);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e, field) => {\r\n    switch (field) {\r\n      case 'name':\r\n        setProductName(e.target.value);\r\n        break;\r\n      case 'price':\r\n        setProductPrice(e.target.value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleAddProduct = async () => {\r\n    try {\r\n      const newProduct = {\r\n        name: productName,\r\n        price: parseFloat(productPrice),\r\n        image: imageUrl,\r\n      };\r\n\r\n      const response = await axios.post('http://localhost:3001/products', newProduct);\r\n      setProducts([...products, response.data]);\r\n      toast.success('Producto añadido con éxito', { toastId: 'add-product' });\r\n      clearFields();\r\n    } catch (error) {\r\n      console.error('Error adding product:', error);\r\n      toast.error('Error al añadir el producto', { toastId: 'add-product-error' });\r\n    }\r\n  };\r\n\r\n  const handleImageUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('upload_preset', uploadPreset);\r\n\r\n    try {\r\n      const res = await axios.post(`https://api.cloudinary.com/v1_1/${cloudName}/image/upload`, formData);\r\n      setImageUrl(res.data.secure_url);\r\n    } catch (err) {\r\n      console.error('Error al subir la imagen:', err);\r\n      toast.error('Error al subir la imagen', { toastId: 'upload-image-error' });\r\n    }\r\n  };\r\n\r\n  const handleDeleteProduct = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:3001/products/${id}`);\r\n      toast.success('Producto eliminado', { toastId: 'delete-product' });\r\n      fetchProducts();\r\n    } catch (error) {\r\n      console.error('Error deleting product:', error);\r\n      toast.error('Error al eliminar el producto', { toastId: 'delete-product-error' });\r\n    }\r\n  };\r\n\r\n  const handleEditProduct = (product) => {\r\n    setEditingProduct(product);\r\n    setProductName(product.name);\r\n    setProductPrice(product.price.toString());\r\n  };\r\n\r\n  const handleUpdateProduct = async () => {\r\n    try {\r\n      const updatedProduct = {\r\n        name: productName,\r\n        price: parseFloat(productPrice),\r\n        image: imageUrl || editingProduct.image,\r\n      };\r\n\r\n      await axios.put(`http://localhost:3001/products/${editingProduct.id}`, updatedProduct);\r\n      toast.success('Producto actualizado con éxito', { toastId: 'update-product' });\r\n      setEditingProduct(null);\r\n      clearFields();\r\n      fetchProducts();\r\n    } catch (error) {\r\n      console.error('Error updating product:', error);\r\n      toast.error('Error al actualizar el producto', { toastId: 'update-product-error' });\r\n    }\r\n  };\r\n\r\n  const clearFields = () => {\r\n    setProductName('');\r\n    setImageUrl('');\r\n    setProductPrice('');\r\n  };\r\n\r\n  const handleFinishChanges = () => {\r\n    handleLogout();\r\n    navigate('/');\r\n    toast.success('Sesión cerrada y cambios guardados', { toastId: 'logout-success' });\r\n    setTimeout(() => {\r\n    }, 2000);\r\n  };\r\n\r\n  return (\r\n    <div className=\"crud-container\">\r\n      <h2>{editingProduct ? 'Editar Producto' : 'Agregar Nuevo Producto'}</h2>\r\n      <div className=\"form-group\">\r\n        <label>Nombre:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={productName}\r\n          onChange={(e) => handleInputChange(e, 'name')}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Precio:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={productPrice}\r\n          onChange={(e) => handleInputChange(e, 'price')}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Imagen:</label>\r\n        <input\r\n          type=\"file\"\r\n          onChange={handleImageUpload}\r\n        />\r\n        {imageUrl && (\r\n          <div>\r\n            <Image cloudName={cloudName} publicId={imageUrl} />\r\n            <button onClick={() => setImageUrl('')}>Eliminar imagen</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {editingProduct ? (\r\n        <button className=\"btn btn-update\" onClick={handleUpdateProduct}>\r\n          Actualizar\r\n        </button>\r\n      ) : (\r\n        <button className=\"añadir\" onClick={handleAddProduct}>\r\n          Añadir\r\n        </button>\r\n      )}\r\n      <button className=\"btn btn-finish\" onClick={handleFinishChanges}>\r\n        Guardar cambios y cerrar sesión\r\n      </button>\r\n\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={3000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"colored\"\r\n        toastStyle={{ backgroundColor: '#ffc0cb', color: '#000' }}\r\n      />\r\n      <h3 className=\"product-list-title\">Mis productos</h3>\r\n      <ul>\r\n        {products.map((product) => (\r\n          <div className=\"product-item\" key={product.id}>\r\n            <li>\r\n              {}\r\n        {product.image.startsWith('http') ? (\r\n          // Si la imagen proviene de Cloudinary\r\n          <img src={product.image} alt={product.name} />\r\n        ) : (\r\n          // Si la imagen proviene del JSON\r\n          <img src={`/images/${product.image}`} alt={product.name} />\r\n        )}\r\n              <p>Precio: {product.price}</p>\r\n              <p> {product.name}</p>\r\n              <button className=\"btn-eliminar\" onClick={() => handleDeleteProduct(product.id)}>\r\n                Eliminar\r\n              </button>\r\n              <button className=\"btn-modificar\" onClick={() => handleEditProduct(product)}>\r\n                Modificar\r\n              </button>\r\n            </li>\r\n          </div>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminCrud;\r\n\r\n/*import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./admin.css\";\r\nimport axios from 'axios';\r\nimport Toastify from 'toastify-js';\r\nimport 'toastify-js/src/toastify.css';\r\n\r\nconst AdminCrud = ({ products, updateProducts }) => {\r\n  const [productName, setProductName] = useState(\"\");\r\n  const [productPrice, setProductPrice] = useState(\"\");\r\n  const [productImage, setProductImage] = useState(null);\r\n\r\n  const navigate = useNavigate();\r\n\r\n\r\n\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      setProductImage(reader.result);\r\n    };\r\n  };\r\n\r\n  const handleAddProduct = async () => {\r\n    const formData = new FormData();\r\n    formData.append(\"name\", productName);\r\n    formData.append(\"price\", productPrice);\r\n    formData.append(\"image\", productImage);\r\n  \r\n    try {\r\n      const response = await axios.post(\"http://localhost:3001/products\", formData, {\r\n        headers: {\r\n          \"Content-Type\": 'multipart/form-data'\r\n        }\r\n      });\r\n      \r\n      updateProducts([...products, response.data]);\r\n      setProductName(\"\");\r\n      setProductPrice(\"\");\r\n      setProductImage(null);\r\n      Toastify({\r\n        text: \"El nuevo producto ha sido agregado\",\r\n        duration: 3000,\r\n        gravity: \"top\",\r\n        position: \"right\",\r\n        style: {\r\n          background: \"green\",\r\n      },}).showToast();\r\n    } catch (error) {\r\n      console.error(\"Error al agregar producto:\", error);\r\n    }\r\n  };\r\n  const handleFinishChanges = () => {\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const handleDeleteProduct = (productId) => {\r\n    fetch(`http://localhost:3001/products/${productId}`, {\r\n      method: \"DELETE\",\r\n    })\r\n      .then(() => {\r\n        updateProducts(products.filter((product) => product.id !== productId));\r\n        Toastify({\r\n          text: \"Producto eliminado\",\r\n          duration: 3000,\r\n          gravity: \"top\",\r\n          position: \"right\",\r\n          backgroundColor: \"red\",\r\n        }).showToast();\r\n      })\r\n      .catch((error) => console.error(\"Error al eliminar el producto:\", error));\r\n  };\r\n\r\n  const handleUpdateProduct = (productId, updatedProduct) => {\r\n    fetch(`http://localhost:3001/products/${productId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(updatedProduct),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        updateProducts(\r\n          products.map((product) => (product.id === productId ? data : product))\r\n        );\r\n      })\r\n      .catch((error) => console.error(\"Error al modificar el producto:\", error));\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"crud-container\">\r\n      <h2 className= 'nuevo'>Agrega un nuevo producto</h2>\r\n      <div className=\"form-group\">\r\n        <label>Nombre:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={productName}\r\n          onChange={(e) => setProductName(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Precio:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={productPrice}\r\n          onChange={(e) => setProductPrice(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Imagen:</label>\r\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n      </div>\r\n      <button className=\"añadir\" onClick={handleAddProduct}>\r\n        Añadir\r\n      </button>\r\n      <button className=\"btn btn-finish\" onClick={handleFinishChanges}>\r\n        Guardar cambios y cerrar sesión\r\n      </button>\r\n      <h2 className= 'lista'>Lista de productos</h2>\r\n      <ul className=\"product-list\">\r\n        {products.map((product) => (\r\n      <li key={product.id} className=\"product-item\">\r\n      <img src={`/images/${product.image}`} alt={product.name} />\r\n      <span>{product.name}</span>\r\n      <span>{product.price}</span>\r\n      <button onClick={() => handleDeleteProduct(product.id)}>\r\n        Eliminar\r\n      </button>\r\n      <button\r\n        onClick={() =>\r\n          handleUpdateProduct(product.id, {\r\n            ...product,\r\n            name: prompt(\"Nuevo nombre\", product.name),\r\n            price: prompt(\"Nuevo precio\", product.price),\r\n            image: productImage || product.image,\r\n          })\r\n        }\r\n      >\r\n        Modificar\r\n      </button>\r\n    </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminCrud;\r\n*/\r\n\r\n\r\n/*\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./admin.css\";\r\nimport axios from 'axios';\r\nimport Toastify from 'toastify-js';\r\nimport 'toastify-js/src/toastify.css';\r\n\r\nconst AdminCrud = ({ products, updateProducts }) => {\r\n  const [productName, setProductName] = useState(\"\");\r\n  const [productPrice, setProductPrice] = useState(\"\");\r\n  const [productImage, setProductImage] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      setProductImage(reader.result);\r\n    };\r\n  };\r\n\r\n  const handleAddProduct = async () => {\r\n    const formData = new FormData();\r\n    formData.append(\"name\", productName);\r\n    formData.append(\"price\", productPrice);\r\n    formData.append(\"image\", productImage);\r\n  \r\n    try {\r\n        const response = await axios.post(\"http://localhost:3001/products\", formData);\r\n        updateProducts([...products, response.data]);\r\n        setProductName(\"\");\r\n        setProductPrice(\"\");\r\n        setProductImage(null);\r\n        Toastify({\r\n          text: \"El nuevo producto ha sido agregado\",\r\n          duration: 3000,\r\n          gravity: \"top\",\r\n          position: \"right\",\r\n          backgroundColor: \"green\",\r\n        }).showToast();\r\n      } catch (error) {\r\n        console.error(\"Error al agregar producto:\", error);\r\n      }\r\n    };\r\n  const handleFinishChanges = () => {\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const handleDeleteProduct = (productId) => {\r\n    fetch(`http://localhost:3001/products/${productId}`, {\r\n      method: \"DELETE\",\r\n    })\r\n      .then(() => {\r\n        updateProducts(products.filter((product) => product.id !== productId));\r\n        Toastify({\r\n          text: \"Producto eliminado\",\r\n          duration: 3000,\r\n          gravity: \"top\",\r\n          position: \"right\",\r\n          backgroundColor: \"red\",\r\n        }).showToast();\r\n      })\r\n      .catch((error) => console.error(\"Error al eliminar el producto:\", error));\r\n  };\r\n\r\n  const handleUpdateProduct = (productId, updatedProduct) => {\r\n    fetch(`http://localhost:3001/products/${productId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(updatedProduct),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        updateProducts(\r\n          products.map((product) => (product.id === productId ? data : product))\r\n        );\r\n      })\r\n      .catch((error) => console.error(\"Error al modificar el producto:\", error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"crud-container\">\r\n      <h2 className= 'nuevo'>Agrega un nuevo producto</h2>\r\n      <div className=\"form-group\">\r\n        <label>Nombre:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={productName}\r\n          onChange={(e) => setProductName(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Precio:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={productPrice}\r\n          onChange={(e) => setProductPrice(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Imagen:</label>\r\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n      </div>\r\n      <button className=\"añadir\" onClick={handleAddProduct}>\r\n        Añadir\r\n      </button>\r\n      <button className=\"btn btn-finish\" onClick={handleFinishChanges}>\r\n        Guardar cambios y cerrar sesión\r\n      </button>\r\n      <h2 className= 'lista'>Lista de productos</h2>\r\n      <ul className=\"product-list\">\r\n        {products.map((product) => (\r\n          <li key={product.id} className=\"product-item\">\r\n            <img src={product.image} alt={product.name} />\r\n            <span>{product.name}</span>\r\n            <span>{product.price}</span>\r\n            <button onClick={() => handleDeleteProduct(product.id)}>\r\n              Eliminar\r\n            </button>\r\n            <button\r\n              onClick={() =>\r\n                handleUpdateProduct(product.id, {\r\n                  ...product,\r\n                  name: prompt(\"Nuevo nombre\", product.name),\r\n                  price: prompt(\"Nuevo precio\", product.price),\r\n                  image: productImage || product.image,\r\n                })\r\n              }\r\n            >\r\n              Modificar\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminCrud; */"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}